From: "Saved by Windows Internet Explorer 8"
Subject: 
Date: Mon, 7 Nov 2011 11:03:00 -1000
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fisheye.kuali.org/browse/~raw,r=14395/kc/trunk/src/main/java/org/kuali/kra/s2s/service/impl/S2SUtilServiceImpl.java
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META content=3D"text/html; charset=3Dutf-8" http-equiv=3DContent-Type>
<META name=3DGENERATOR content=3D"MSHTML 8.00.7601.17655"></HEAD>
<BODY><PRE>/*
 * Copyright 2005-2010 The Kuali Foundation.
 *=20
 * Licensed under the Educational Community License, Version 1.0 (the =
"License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *=20
 * http://www.opensource.org/licenses/ecl1.php
 *=20
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or =
implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.kra.s2s.service.impl;




import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.kuali.kra.award.home.Award;
import org.kuali.kra.award.home.ContactRole;
import org.kuali.kra.bo.CitizenshipType;
import org.kuali.kra.bo.CoeusModule;
import org.kuali.kra.bo.CoeusSubModule;
import org.kuali.kra.bo.KcPerson;
import org.kuali.kra.bo.Organization;
import org.kuali.kra.bo.Rolodex;
import org.kuali.kra.bo.Unit;
import org.kuali.kra.bo.UnitAdministrator;
import org.kuali.kra.budget.BudgetDecimal;
import org.kuali.kra.budget.personnel.BudgetPersonnelDetails;
import org.kuali.kra.infrastructure.Constants;
import org.kuali.kra.infrastructure.KeyConstants;
import org.kuali.kra.infrastructure.KraServiceLocator;
import org.kuali.kra.institutionalproposal.home.InstitutionalProposal;
import =
org.kuali.kra.institutionalproposal.proposaladmindetails.ProposalAdminDet=
ails;
import org.kuali.kra.proposaldevelopment.bo.DevelopmentProposal;
import org.kuali.kra.proposaldevelopment.bo.Narrative;
import org.kuali.kra.proposaldevelopment.bo.ProposalPerson;
import org.kuali.kra.proposaldevelopment.bo.ProposalPersonUnit;
import org.kuali.kra.proposaldevelopment.bo.ProposalSite;
import org.kuali.kra.proposaldevelopment.bo.ProposalYnq;
import =
org.kuali.kra.proposaldevelopment.document.ProposalDevelopmentDocument;
import =
org.kuali.kra.proposaldevelopment.questionnaire.ProposalPersonModuleQuest=
ionnaireBean;
import org.kuali.kra.proposaldevelopment.service.NarrativeService;
import =
org.kuali.kra.proposaldevelopment.service.ProposalDevelopmentS2sQuestionn=
aireService;
import =
org.kuali.kra.proposaldevelopment.service.ProposalDevelopmentService;
import org.kuali.kra.questionnaire.Questionnaire;
import org.kuali.kra.questionnaire.QuestionnaireQuestion;
import org.kuali.kra.questionnaire.QuestionnaireService;
import org.kuali.kra.questionnaire.answer.Answer;
import org.kuali.kra.questionnaire.answer.AnswerHeader;
import org.kuali.kra.questionnaire.answer.QuestionnaireAnswerService;
import org.kuali.kra.s2s.bo.S2sAppSubmission;
import org.kuali.kra.s2s.bo.S2sOpportunity;
import org.kuali.kra.s2s.generator.bo.DepartmentalPerson;
import org.kuali.kra.s2s.generator.bo.KeyPersonInfo;
import org.kuali.kra.s2s.service.S2SUtilService;
import org.kuali.kra.s2s.util.S2SConstants;
import org.kuali.kra.service.CitizenshipTypeService;
import org.kuali.kra.service.KcPersonService;
import org.kuali.kra.service.SponsorService;
import org.kuali.rice.kns.bo.Country;
import org.kuali.rice.kns.bo.State;
import org.kuali.rice.kns.service.BusinessObjectService;
import org.kuali.rice.kns.service.CountryService;
import org.kuali.rice.kns.service.DateTimeService;
import org.kuali.rice.kns.service.KualiConfigurationService;
import org.kuali.rice.kns.service.ParameterConstants;
import org.kuali.rice.kns.service.ParameterService;
import org.kuali.rice.kns.service.StateService;
import org.kuali.kra.infrastructure.CitizenshipTypes;
/**
 *=20
 *=20
 * This class is the implementation for all reusable components that are =
part of S2S
 *=20
 * @author Kuali Research Administration Team (kualidev@oncourse.iu.edu)
 */
public class S2SUtilServiceImpl implements S2SUtilService {

	private static final String FEDERAL_ID_COMES_FROM_CURRENT_AWARD =3D =
"FEDERAL_ID_COMES_FROM_CURRENT_AWARD";
    private BusinessObjectService businessObjectService;
	private DateTimeService dateTimeService;
	private KualiConfigurationService kualiConfigurationService;
	private ParameterService parameterService;
    private ProposalDevelopmentService proposalDevelopmentService;
    private KcPersonService kcPersonService;
    private SponsorService sponsorService;
    private NarrativeService narrativeService;
    private CitizenshipTypeService citizenshipTypeService;
    private ProposalDevelopmentS2sQuestionnaireService =
proposalDevelopmentS2sQuestionnaireService;
	private static final String SUBMISSION_TYPE_CODE =3D =
"submissionTypeCode";
	private static final String SUBMISSION_TYPE_DESCRIPTION =3D =
"submissionTypeDescription";
	private static final String PROPOSAL_YNQ_STATE_REVIEW =3D "EO";
	private static final String YNQ_NOT_REVIEWED =3D "X";
	private static final int DIVISION_NAME_MAX_LENGTH =3D 30;
    private static final String PROPOSAL_CONTACT_TYPE =3D =
"PROPOSAL_CONTACT_TYPE";
    private static final String CONTACT_TYPE_O =3D "O";
	private static final Log LOG =3D =
LogFactory.getLog(S2SUtilServiceImpl.class);
=09
	private static final String MODULE_ITEM_KEY =3D "moduleItemKey";
	private static final String MODULE_ITEM_CODE =3D "moduleItemCode";
	private static final Integer MODULE_ITEM_CODE_THREE =3D 3;
	private static final String MODULE_SUB_ITEM_CODE=3D"moduleSubItemCode";
	private static final Integer MODULE_SUB_ITEM_CODE_ZERO=3D 0;
	private static final String MODULE_SUB_ITEM_KEY=3D "moduleSubItemKey";
	private static final Integer MODULE_SUB_ITEM_KEY_ZERO=3D 0;
   =20
	private static final String SEQUENCE_NUMBER=3D"sequenceNumber";
	private static final String QUESTIONNAIRE_ID=3D"questionnaireId";
	private static final String =
QUESTIONNAIRE_REF_ID_FK=3D"questionnaireRefIdFk";
	private static final String PI_CUSTOM_DATA =3D =
"PI_CITIZENSHIP_FROM_CUSTOM_DATA";
	/**
	 * This method creates and returns Map of submission details like =
submission
	 * type, description and Revision code
	 *=20
	 * @param pdDoc
	 *            Proposal Development Document.
	 * @return Map&lt;String, String&gt; Map of submission details.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getSubmissionType(org.kuali.kra.=
proposaldevelopment.document.ProposalDevelopmentDocument)
	 */
	public Map&lt;String, String&gt; getSubmissionType(
			ProposalDevelopmentDocument pdDoc) {
		Map&lt;String, String&gt; submissionInfo =3D new HashMap&lt;String, =
String&gt;();
		S2sOpportunity opportunity =3D pdDoc.getDevelopmentProposal()
				.getS2sOpportunity();
		if (opportunity !=3D null) {
			opportunity.refreshNonUpdateableReferences();
			String submissionTypeCode =3D opportunity.getS2sSubmissionTypeCode();
			String submissionTypeDescription =3D "";
			if (opportunity.getS2sSubmissionType() !=3D null) {
				submissionTypeDescription =3D opportunity.getS2sSubmissionType()
						.getDescription();
			}
			String revisionCode =3D opportunity.getRevisionCode();
			String revisionOtherDescription =3D opportunity
					.getRevisionOtherDescription();

			submissionInfo.put(SUBMISSION_TYPE_CODE, submissionTypeCode);
			submissionInfo.put(SUBMISSION_TYPE_DESCRIPTION,
					submissionTypeDescription);
			submissionInfo.put(S2SConstants.KEY_REVISION_CODE, revisionCode);
			if (revisionOtherDescription !=3D null) {
				submissionInfo.put(S2SConstants.KEY_REVISION_OTHER_DESCRIPTION,
						revisionOtherDescription);
			}
		}
		return submissionInfo;
	}

	/**
	 * This method populates and returns the Departmental Person object for =
a
	 * given proposal document
	 *=20
	 * @param pdDoc
	 *            Proposal Development Document.
	 * @return DepartmentalPerson departmental Person object for a given
	 *         proposal document.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getDepartmentalPerson(org.kuali.=
kra.proposaldevelopment.document.ProposalDevelopmentDocument)
	 */
	public DepartmentalPerson getDepartmentalPerson(
			ProposalDevelopmentDocument pdDoc) {
		int count =3D 0;
		DepartmentalPerson depPerson =3D new DepartmentalPerson();
		// TODO fetch count from institute proposal tables after its
		// implementation
		if (count &lt; 1) {
			// Proposal has not been submitted

			Organization organization =3D pdDoc.getDevelopmentProposal()
					.getApplicantOrganization().getOrganization();
			Rolodex rolodex =3D organization =3D=3D null ? null : organization
					.getRolodex();
			if (rolodex !=3D null) {
				depPerson.setFirstName(rolodex.getFirstName());
				depPerson.setMiddleName(rolodex.getMiddleName());
				depPerson.setLastName(rolodex.getLastName());
				StringBuilder fullName =3D new StringBuilder();
				if (rolodex.getFirstName() !=3D null) {
					fullName.append(rolodex.getFirstName());
					fullName.append(" ");
				}
				if (rolodex.getMiddleName() !=3D null) {
					fullName.append(rolodex.getMiddleName());
					fullName.append(" ");
				}
				if (rolodex.getLastName() !=3D null) {
					fullName.append(rolodex.getLastName());
				}
				depPerson.setFullName(fullName.toString());

				depPerson.setEmailAddress(rolodex.getEmailAddress());
				depPerson.setOfficePhone(rolodex.getPhoneNumber());
				depPerson.setPrimaryTitle(rolodex.getTitle());
				depPerson.setAddress1(rolodex.getAddressLine1());
				depPerson.setAddress2(rolodex.getAddressLine2());
				depPerson.setAddress3(rolodex.getAddressLine3());
				depPerson.setCity(rolodex.getCity());
				depPerson.setCounty(rolodex.getCounty());
				depPerson.setCountryCode(rolodex.getCountryCode());
				depPerson.setFaxNumber(rolodex.getFaxNumber());
				depPerson.setPostalCode(rolodex.getPostalCode());
				depPerson.setState(rolodex.getState());
				depPerson.setPersonId(Integer.toString(rolodex.getRolodexId()));
				depPerson.setDirDept(organization.getOrganizationName());
			}
		} else {
			// proposal has been submitted
			// TODO fetched SIGNED_BY fromPROPOSAL_ADMIN_DETAILS after
			// implementation and complete the remaining logic

		}
		return depPerson;
	}

	/**
	 * This method limits the number of key persons to n, returns list of =
key
	 * persons, first n in case firstN is true, or all other than first n, =
in
	 * case of firstN being false
	 *=20
	 * @param proposalPersons
	 *            list of {@link ProposalPerson}
	 * @param firstN
	 *            value that determines whether the returned list should =
contain
	 *            first n persons or the rest of persons
	 * @param n
	 *            number of key persons that are considered as not extra =
persons
	 * @return list of {@link ProposalPerson}
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getNKeyPersons(java.util.List,
	 *      boolean, int)
	 */
	public List&lt;ProposalPerson&gt; getNKeyPersons(
			List&lt;ProposalPerson&gt; proposalPersons, boolean firstN, int n) {
		ProposalPerson proposalPerson, previousProposalPerson;
		int size =3D proposalPersons.size();

		for (int i =3D size - 1; i &gt; 0; i--) {
			proposalPerson =3D proposalPersons.get(i);
			previousProposalPerson =3D proposalPersons.get(i - 1);
			if (proposalPerson.getPersonId() !=3D null
					&amp;&amp; previousProposalPerson.getPersonId() !=3D null
					&amp;&amp; proposalPerson.getPersonId().equals(
							previousProposalPerson.getPersonId())) {
				proposalPersons.remove(i);
			} else if (proposalPerson.getRolodexId() !=3D null
					&amp;&amp; previousProposalPerson.getRolodexId() !=3D null
					&amp;&amp; proposalPerson.getRolodexId().equals(
							previousProposalPerson.getRolodexId())) {
				proposalPersons.remove(i);
			}
		}

		size =3D proposalPersons.size();
		if (firstN) {
			List&lt;ProposalPerson&gt; firstNPersons =3D new =
ArrayList&lt;ProposalPerson&gt;();

			// Make sure we don't exceed the size of the list.
			if (size &gt; n) {
				size =3D n;
			}
			// remove extras
			for (int i =3D 0; i &lt; size; i++) {
				firstNPersons.add(proposalPersons.get(i));
			}
			return firstNPersons;
		} else {
			// return extra people
			List&lt;ProposalPerson&gt; extraPersons =3D new =
ArrayList&lt;ProposalPerson&gt;();
			for (int i =3D n; i &lt; size; i++) {
				extraPersons.add(proposalPersons.get(i));
			}
			return extraPersons;
		}
	}

	/**
	 * This method returns a map containing the answers related to EOState
	 * REview for a given proposal
	 *=20
	 * @param pdDoc
	 *            Proposal Development Document.
	 * @return Map&lt;String, String&gt; map containing the answers related =
to
	 *         EOState Review for a given proposal.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getEOStateReview(org.kuali.kra.p=
roposaldevelopment.document.ProposalDevelopmentDocument)
	 */
	public Map&lt;String, String&gt; getEOStateReview(
			ProposalDevelopmentDocument pdDoc) {
		Map&lt;String, String&gt; stateReview =3D new HashMap&lt;String, =
String&gt;();
		for (ProposalYnq proposalYnq : pdDoc.getDevelopmentProposal()
				.getProposalYnqs()) {
			if (proposalYnq.getQuestionId().equals(PROPOSAL_YNQ_STATE_REVIEW)) {
				stateReview.put(S2SConstants.YNQ_ANSWER, proposalYnq
						.getAnswer());
				if (proposalYnq.getReviewDate() !=3D null) {
					DateFormat dateFormat =3D new SimpleDateFormat("MM/dd/yyyy");
					stateReview.put(S2SConstants.YNQ_REVIEW_DATE, dateFormat
							.format(proposalYnq.getReviewDate()));
				}
			}
		}

		// If question is not answered or question is inactive
		if (stateReview.size() =3D=3D 0) {
			stateReview.put(S2SConstants.YNQ_ANSWER, YNQ_NOT_REVIEWED);
			stateReview.put(S2SConstants.YNQ_REVIEW_DATE, null);
		}
		return stateReview;

	}

    /**
     * This method returns the Federal ID for a given proposal
     *=20
     * @param proposalDevelopmentDocument Proposal Development Document.
     * @return Federal ID for a given proposal.
     * @see =
org.kuali.kra.s2s.service.S2SUtilService#getFederalId(org.kuali.kra.propo=
saldevelopment.document.ProposalDevelopmentDocument)
     */
    public String getFederalId(ProposalDevelopmentDocument =
proposalDevelopmentDocument) {
        String federalIdComesFromAwardStr =3D =
parameterService.getParameterValue(ProposalDevelopmentDocument.class, =
FEDERAL_ID_COMES_FROM_CURRENT_AWARD);
        Boolean federalIdComesFromAward =3D federalIdComesFromAwardStr =
!=3D null &amp;&amp; federalIdComesFromAwardStr.equalsIgnoreCase("Y");
        DevelopmentProposal proposal =3D =
proposalDevelopmentDocument.getDevelopmentProposal();
        Award currentAward =3D null;
        String federalId =3D null;
        if (StringUtils.isNotBlank(proposal.getCurrentAwardNumber())) {
            currentAward =3D =
proposalDevelopmentService.getProposalCurrentAwardVersion(proposalDevelop=
mentDocument);
        }
        InstitutionalProposal institutionalProposal =3D null;
        if (StringUtils.isNotBlank(proposal.getContinuedFrom())) {
            institutionalProposal =3D =
proposalDevelopmentService.getProposalContinuedFromVersion(proposalDevelo=
pmentDocument);
        }
        if =
(isProposalTypeRenewalRevisionContinuation(proposal.getProposalTypeCode()=
)) {
            if =
(!StringUtils.isBlank(proposal.getSponsorProposalNumber())) {
                federalId =3D proposal.getSponsorProposalNumber();
            } else if (currentAward !=3D null &amp;&amp; =
!StringUtils.isBlank(currentAward.getSponsorAwardNumber())
                    &amp;&amp; federalIdComesFromAward) {
                federalId =3D currentAward.getSponsorAwardNumber();
            } else {=20
                return null;
            }
        } else if (isProposalTypeNew(proposal.getProposalTypeCode())=20
                    &amp;&amp; (proposal.getS2sOpportunity() !=3D null=20
                            &amp;&amp; =
isSubmissionTypeChangeCorrected(proposal.getS2sOpportunity().getS2sSubmis=
sionTypeCode()))) {
            if =
(!StringUtils.isBlank(proposal.getSponsorProposalNumber())) {
                federalId =3D proposal.getSponsorProposalNumber();
            } else if (institutionalProposal !=3D null) {
                federalId =3D =
getGgTrackingIdFromProposal(institutionalProposal);
            }
        } else if =
(isProposalTypeResubmission(proposal.getProposalTypeCode())) {
            if =
(!StringUtils.isBlank(proposal.getSponsorProposalNumber())) {
                federalId =3D proposal.getSponsorProposalNumber();
            } else if (institutionalProposal !=3D null &amp;&amp; =
!StringUtils.isBlank(institutionalProposal.getSponsorProposalNumber())) =
{
                federalId =3D =
institutionalProposal.getSponsorProposalNumber();
            }
            =
if(isProposalTypeResubmission(proposal.getProposalTypeCode())){
                if (  =
proposal.getSponsorCode().equals(this.parameterService.getParameterValue(=
Constants.KC_GENERIC_PARAMETER_NAMESPACE, =
ParameterConstants.ALL_COMPONENT, KeyConstants.NSF_SPONSOR_CODE))) {
                    return null;
                }
            }
        }
        if (federalId !=3D null &amp;&amp; =
sponsorService.isSponsorNihMultiplePi(proposal)) {
            return fromatFederalId(federalId);
        }
        return federalId;
    }=20
   =20
    /**
     *=20
     * @see =
org.kuali.kra.s2s.service.S2SUtilService#getGgTrackingIdFromProposal(org.=
kuali.kra.institutionalproposal.home.InstitutionalProposal)
     */
    public String getGgTrackingIdFromProposal(InstitutionalProposal =
proposal) {
        DevelopmentProposal newestDevProp =3D =
getNewestDevPropFromInstProp(proposal);
        if (newestDevProp !=3D null &amp;&amp; =
newestDevProp.getS2sOpportunity() !=3D null) {
            S2sAppSubmission appSubmission =3D null;
            int submissionNo =3D 0;
            for (S2sAppSubmission s2AppSubmission : =
newestDevProp.getS2sAppSubmission()) {
                if (s2AppSubmission.getSubmissionNumber() &gt; =
submissionNo &amp;&amp; =
StringUtils.isNotBlank(s2AppSubmission.getGgTrackingId())) {
                    appSubmission =3D s2AppSubmission;
                    submissionNo =3D =
s2AppSubmission.getSubmissionNumber();
                }
            }
            if (appSubmission !=3D null) {
                return appSubmission.getGgTrackingId();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    protected DevelopmentProposal =
getNewestDevPropFromInstProp(InstitutionalProposal instProp) {
        Map&lt;String, Object&gt; fieldValues =3D new HashMap&lt;String, =
Object&gt;();
        fieldValues.put("proposalNumber", instProp.getProposalNumber());
        List&lt;InstitutionalProposal&gt; instProps =3D
            (List&lt;InstitutionalProposal&gt;) =
businessObjectService.findMatchingOrderBy(InstitutionalProposal.class, =
fieldValues, "sequenceNumber", false);
        for (InstitutionalProposal curProp : instProps) {
            Map&lt;String, Object&gt; detailFieldValues =3D new =
HashMap&lt;String, Object&gt;();
            detailFieldValues.put("instProposalId", =
instProp.getProposalId());
            List&lt;ProposalAdminDetails&gt; details =3D=20
                (List&lt;ProposalAdminDetails&gt;) =
businessObjectService.findMatching(ProposalAdminDetails.class, =
detailFieldValues);
            for (ProposalAdminDetails curDetail : details) {
                return curDetail.getDevelopmentProposal();
            }
        }
        return null;
    }

    /**
     *=20
     * This method is to format sponsor award number
     * assume sponsor award number format is like this : =
5-P01-ES05622-09, it should be formatted to ES05622=20
     * @param federalId
     * @return
     */
	protected String fromatFederalId(String federalId) {
	    if(federalId.length()&gt;7){
	        int in =3D federalId.indexOf('-', 8);
	        if(in!=3D-1)
	            federalId=3D federalId.substring(6, in);
	    }
        return federalId;
    }

    protected boolean isSubmissionTypeChangeCorrected(String =
submissionTypeCode) {
	    return StringUtils.equalsIgnoreCase(submissionTypeCode, =
getParameterValue(KeyConstants.S2S_SUBMISSIONTYPE_CHANGEDCORRECTED));
    }

    /**
	 * This method fetches system constant parameters
	 *=20
	 * @param parameter
	 *            String for which value must be fetched
	 * @return String System constant parameters.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getParameterValue(java.lang.Stri=
ng)
	 */
	public String getParameterValue(String parameter) {
		String parameterValue =3D null;
		try {
			parameterValue =3D this.parameterService.getParameterValue(
					ProposalDevelopmentDocument.class, parameter);
		} catch (IllegalArgumentException e) {
			LOG.error("Parameter not found - " + parameter, e);
		}
		return parameterValue;
	}

    protected boolean isProposalTypeRenewalRevisionContinuation(String =
proposalTypeCode) {
        String proposalTypeCodeRenewal =3D=20
            =
parameterService.getParameterValue(ProposalDevelopmentDocument.class, =
KeyConstants.PROPOSALDEVELOPMENT_PROPOSALTYPE_RENEWAL);
        String proposalTypeCodeRevision =3D=20
            =
parameterService.getParameterValue(ProposalDevelopmentDocument.class, =
KeyConstants.PROPOSALDEVELOPMENT_PROPOSALTYPE_REVISION);
        String proposalTypeCodeContinuation =3D=20
            =
parameterService.getParameterValue(ProposalDevelopmentDocument.class, =
KeyConstants.PROPOSALDEVELOPMENT_PROPOSALTYPE_CONTINUATION);
        =20
        return !StringUtils.isEmpty(proposalTypeCode) &amp;&amp;
               (proposalTypeCode.equals(proposalTypeCodeRenewal) ||
                proposalTypeCode.equals(proposalTypeCodeRevision) ||
                proposalTypeCode.equals(proposalTypeCodeContinuation));
    } =20
   =20
    /**
     * Is the Proposal Type set to Resubmission?
     * @param proposalTypeCode proposal type code
     * @return true or false
     */
    protected boolean isProposalTypeResubmission(String =
proposalTypeCode) {
        String proposalTypeCodeResubmission =3D=20
            =
parameterService.getParameterValue(ProposalDevelopmentDocument.class, =
KeyConstants.PROPOSALDEVELOPMENT_PROPOSALTYPE_RESUBMISSION);
        =20
        return !StringUtils.isEmpty(proposalTypeCode) &amp;&amp;
               (proposalTypeCode.equals(proposalTypeCodeResubmission));
    }
   =20
    /**
     * Is the Proposal Type set to New?
     * @param proposalTypeCode proposal type code
     * @return true or false
     */
    protected boolean isProposalTypeNew(String proposalTypeCode) {
        String proposalTypeCodeNew =3D=20
            =
parameterService.getParameterValue(ProposalDevelopmentDocument.class, =
KeyConstants.PROPOSALDEVELOPMENT_PROPOSALTYPE_NEW);
        =20
        return !StringUtils.isEmpty(proposalTypeCode) &amp;&amp;
               (proposalTypeCode.equals(proposalTypeCodeNew));
    }   =20


	/**
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getProperty(java.lang.String)
	 */
	public String getProperty(String key) {
		String value =3D kualiConfigurationService.getPropertyString(key);
		return value =3D=3D null ? "" : value;
	}

	/**
	 * This method returns a {@link Calendar} whose date matches the date =
passed
	 * as {@link String}
	 *=20
	 * @param dateStr
	 *            string in "MM/dd/yyyy" format for which the Calendar =
value has
	 *            to be returned.
	 * @return Calendar calendar value corresponding to the date string.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#convertDateStringToCalendar(java=
.lang.String)
	 */
	public Calendar convertDateStringToCalendar(String dateStr) {
		Calendar calendar =3D null;
		if (dateStr !=3D null) {
			calendar =3D dateTimeService.getCurrentCalendar();
			calendar.set(Integer.parseInt(dateStr.substring(6, 10)), Integer
					.parseInt(dateStr.substring(0, 2)) - 1, Integer
					.parseInt(dateStr.substring(3, 5)));
		}
		return calendar;
	}

	/**
	 *=20
	 * This method is used to get current Calendar
	 *=20
	 * @return {@link Calendar}
	 */
	public Calendar getCurrentCalendar() {
		return dateTimeService.getCurrentCalendar();
	}

	/**
	 * This method is used to get Calendar date for the corresponding date
	 * object.
	 *=20
	 * @param date(Date)
	 *            date for which Calendar value has to be found.
	 * @return calendar value corresponding to the date.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#convertDateToCalendar(java.sql.D=
ate)
	 */
	public Calendar convertDateToCalendar(Date date) {
		Calendar calendar =3D null;
		if (date !=3D null) {
			calendar =3D dateTimeService.getCalendar(date);
		}
		return calendar;
	}

	/**
	 * This method is to set businessObjectService
	 *=20
	 * @param businessObjectService(BusinessObjectService)
	 */
	public void setBusinessObjectService(
			BusinessObjectService businessObjectService) {
		this.businessObjectService =3D businessObjectService;
	}

	/**
	 * Sets the dateTimeService attribute value.
	 *=20
	 * @param dateTimeService
	 *            The dateTimeService to set.
	 */
	public void setDateTimeService(DateTimeService dateTimeService) {
		this.dateTimeService =3D dateTimeService;
	}

	/**
	 * Gets the kualiConfigurationService attribute.
	 *=20
	 * @return Returns the kualiConfigurationService.
	 */
	public KualiConfigurationService getKualiConfigurationService() {
		return kualiConfigurationService;
	}

	/**
	 * Sets the ParameterService.
	 *=20
	 * @param parameterService
	 *            the parameter service.
	 */
	public void setParameterService(ParameterService parameterService) {
		this.parameterService =3D parameterService;
	}

	/**
	 * Sets the kualiConfigurationService attribute value.
	 *=20
	 * @param kualiConfigurationService
	 *            The kualiConfigurationService to set.
	 */
	public void setKualiConfigurationService(
			KualiConfigurationService kualiConfigurationService) {
		this.kualiConfigurationService =3D kualiConfigurationService;
	}

	/**
	 * This method is to get division name using the OwnedByUnit and =
traversing
	 * through the parent units till the top level
	 *=20
	 * @param pdDoc
	 *            Proposal development document.
	 * @return divisionName based on the OwnedByUnit.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getDivisionName(org.kuali.kra.pr=
oposaldevelopment.document.ProposalDevelopmentDocument)
	 */
	public String getDivisionName(ProposalDevelopmentDocument pdDoc) {
		String divisionName =3D null;
		if (pdDoc !=3D null
				&amp;&amp; pdDoc.getDevelopmentProposal().getOwnedByUnit() !=3D =
null) {
			Unit ownedByUnit =3D pdDoc.getDevelopmentProposal().getOwnedByUnit();
			// traverse through the parent units till the top level unit
			while (ownedByUnit.getParentUnit() !=3D null) {
				ownedByUnit =3D ownedByUnit.getParentUnit();
			}
			divisionName =3D ownedByUnit.getUnitName();
			if (divisionName.length() &gt; DIVISION_NAME_MAX_LENGTH) {
				divisionName =3D divisionName.substring(0,
						DIVISION_NAME_MAX_LENGTH);
			}
		}
		return divisionName;
	}

	/**
	 * This method is to get PrincipalInvestigator from person list
	 *=20
	 * @param pdDoc
	 *            Proposal development document.
	 * @return ProposalPerson PrincipalInvestigator for the proposal.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getPrincipalInvestigator(org.kua=
li.kra.proposaldevelopment.document.ProposalDevelopmentDocument)
	 */
	public ProposalPerson getPrincipalInvestigator(
			ProposalDevelopmentDocument pdDoc) {
		ProposalPerson proposalPerson =3D null;
		if (pdDoc !=3D null) {
			for (ProposalPerson person : pdDoc.getDevelopmentProposal()
					.getProposalPersons()) {
				if (ContactRole.PI_CODE.equals(person.getProposalPersonRoleId())) {
					proposalPerson =3D person;
				}
			}
		}
		return proposalPerson;
	}
	/**
	 * Finds all the Investigators associated with the provided pdDoc.
	 * @param ProposalDevelopmentDocument
	 * @return
	 */
	public List&lt;ProposalPerson&gt; =
getCoInvestigators(ProposalDevelopmentDocument pdDoc) {
		List&lt;ProposalPerson&gt; investigators =3D new =
ArrayList&lt;ProposalPerson&gt;();
		if (pdDoc !=3D null) {
			for (ProposalPerson person : pdDoc.getDevelopmentProposal()
					.getProposalPersons()) {
				if(ContactRole.COI_CODE.equals(person.getProposalPersonRoleId())){
					investigators.add(person);
				}
			}
		}
		return investigators;
	}
	/**
	 * Finds all the key Person associated with the provided pdDoc.
	 * @param ProposalDevelopmentDocument
	 * @return
	 */
	public List&lt;ProposalPerson&gt; getKeyPersons =
(ProposalDevelopmentDocument pdDoc) {
		List&lt;ProposalPerson&gt; keyPersons =3D new =
ArrayList&lt;ProposalPerson&gt;();
		if (pdDoc !=3D null) {
			for (ProposalPerson person : pdDoc.getDevelopmentProposal()
					.getProposalPersons()) {
				=
if(ContactRole.KEY_PERSON_CODE.equals(person.getProposalPersonRoleId())){=

					keyPersons.add(person);
				}
			}
		}
		return keyPersons;
	}
	/**
	 * This method is to get a Country object from the country code
	 *=20
	 * @param countryCode
	 *            country code for the country.
	 * @return Country object matching the code
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getCountryFromCode(java.lang.Str=
ing)
	 */
	public Country getCountryFromCode(String countryCode) {
		Country country =3D =
getCountryService().getByAlternatePostalCountryCode(countryCode);
		return country;
	}
=09
	protected static CountryService getCountryService() {
	    return KraServiceLocator.getService(CountryService.class);
	}

	/**
	 * This method is to get a State object from the state name
	 *=20
	 * @param stateName
	 *            Name of the state
	 * @return State object matching the name.
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getStateFromName(java.lang.Strin=
g)
	 */
	public State getStateFromName(String stateName) {
		State state =3D getStateService().getByPrimaryId(stateName);
		return state;
	}
=09
	protected static StateService getStateService() {
        return KraServiceLocator.getService(StateService.class);
    }

	/**
	 * This method compares a proposal person with budget person. It checks
	 * whether the proposal person is from PERSON or ROLODEX and matches =
the
	 * respective person ID with the person in {@link =
BudgetPersonnelDetails}.
	 * It returns true only if IDs are not null and also matches eachother.
	 *=20
	 * @param proposalPerson -
	 *            key person from proposal
	 * @param budgetPersonnelDetails
	 *            person from BudgetPersonnelDetails
	 * @return true if persons match, false otherwise
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#proposalPersonEqualsBudgetPerson=
(org.kuali.kra.proposaldevelopment.bo.ProposalPerson,
	 *      org.kuali.kra.budget.personnel.BudgetPersonnelDetails)
	 */
	public boolean proposalPersonEqualsBudgetPerson(
			ProposalPerson proposalPerson,
			BudgetPersonnelDetails budgetPersonnelDetails) {
		boolean equal =3D false;
		if (proposalPerson !=3D null &amp;&amp; budgetPersonnelDetails !=3D =
null) {
			String budgetPersonId =3D budgetPersonnelDetails.getPersonId();
			if ((proposalPerson.getPersonId() !=3D null &amp;&amp; proposalPerson
					.getPersonId().equals(budgetPersonId))
					|| (proposalPerson.getRolodexId() !=3D null &amp;&amp; =
proposalPerson
							.getRolodexId().toString().equals(budgetPersonId))) {
				equal =3D true;
			}
		}
		return equal;
	}


    /**
     * This method compares a key person with budget person. It checks =
whether the key person is from PERSON or ROLODEX and matches
     * the respective person ID with the person in {@link =
BudgetPersonnelDetails}
     *=20
     * @param keyPersonInfo - key person to compare
     * @param budgetPersonnelDetails person from BudgetPersonnelDetails
     * @return true if persons match, false otherwise
     * @see =
org.kuali.kra.s2s.service.S2SUtilService#keyPersonEqualsBudgetPerson(org.=
kuali.kra.s2s.generator.bo.KeyPersonInfo,
     *      org.kuali.kra.budget.personnel.BudgetPersonnelDetails)
     */
    public boolean keyPersonEqualsBudgetPerson(KeyPersonInfo =
keyPersonInfo, BudgetPersonnelDetails budgetPersonnelDetails) {
        boolean equal =3D false;
        if (keyPersonInfo !=3D null &amp;&amp; budgetPersonnelDetails =
!=3D null) {
            String budgetPersonId =3D =
budgetPersonnelDetails.getPersonId();
            if ((keyPersonInfo.getPersonId() !=3D null &amp;&amp; =
keyPersonInfo.getPersonId().equals(budgetPersonId))
                    || (keyPersonInfo.getRolodexId() !=3D null =
&amp;&amp; =
keyPersonInfo.getRolodexId().toString().equals(budgetPersonId))) {
                equal =3D true;
            }
        }        =20
        return equal;
    }
   =20
    public void setProposalDevelopmentService(ProposalDevelopmentService =
proposalDevelopmentService) {
        this.proposalDevelopmentService =3D proposalDevelopmentService;
    }
=09

	/**
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#convertStringArrayToString(Strin=
g[])
	 */
	public String convertStringArrayToString(String[] stringArray) {
		StringBuilder stringBuilder =3D new StringBuilder();
		if (stringArray !=3D null &amp;&amp; stringArray.length &gt; 0) {
			for (int i =3D 0; i &lt; stringArray.length; i++) {
				if (stringBuilder.length() &gt; 0) {
					stringBuilder.append(", ");
				}
				stringBuilder.append(stringArray[i]);
			}
		}
		return stringBuilder.toString();
	}
=09
	public String convertStringListToString(List&lt;String&gt; stringList) =
{
	    String retVal =3D "";
	    if (stringList !=3D null) {
	        for (int i =3D 0; i &lt; stringList.size(); i++) {
	            retVal +=3D stringList.get(i);
	            if (i !=3D stringList.size()-1) {
	                retVal +=3D ", ";=20
	            }
	        }
	    }
	    return retVal;
	}

	/**
	 * Finds all the Questionnaire Answers associates with provided
	 * ProposalNumber.
	 *=20
	 * @param pdDoc
	 * @return List of Questionnaire {@link Answer}.
	 */
	public List&lt;Answer&gt; getQuestionnaireAnswers(
			ProposalDevelopmentDocument pdDoc,Integer questionnaireId) {
		List&lt;Answer&gt; questionnaireAnswers =3D new =
ArrayList&lt;Answer&gt;();
		String proposalNumber =3D pdDoc.getDevelopmentProposal()
				.getProposalNumber();
		Questionnaire questionnaire =3D =
getHighestSequenceNumberQuestionnair(questionnaireId);
		if (questionnaire !=3D null) {
			Map&lt;String, Object&gt; fieldValues =3D new HashMap&lt;String, =
Object&gt;();
			fieldValues.put(MODULE_ITEM_KEY, proposalNumber);
			fieldValues.put(MODULE_ITEM_CODE, MODULE_ITEM_CODE_THREE);
			fieldValues.put(MODULE_SUB_ITEM_CODE, MODULE_SUB_ITEM_CODE_ZERO);
			fieldValues.put(MODULE_SUB_ITEM_KEY, MODULE_SUB_ITEM_KEY_ZERO);
			fieldValues.put(QUESTIONNAIRE_REF_ID_FK, questionnaire
					.getQuestionnaireRefId());
			Collection&lt;AnswerHeader&gt; answerHeaderList =3D =
businessObjectService
					.findMatching(AnswerHeader.class, fieldValues);
			for (AnswerHeader answerHeader : answerHeaderList) {
				questionnaireAnswers.addAll(answerHeader.getAnswers());
			}
		}
		return questionnaireAnswers;
	}
	/**
	 *=20
	 * @see =
org.kuali.kra.s2s.service.S2SUtilService#getQuestionnaireAnswersForPerson=
(org.kuali.kra.proposaldevelopment.document.ProposalDevelopmentDocument, =
org.kuali.kra.proposaldevelopment.bo.ProposalPerson)
	 */
    public List&lt;Answer&gt; =
getQuestionnaireAnswersForPI(ProposalDevelopmentDocument pdDoc) {
        List&lt;Answer&gt; questionnaireAnswers =3D new =
ArrayList&lt;Answer&gt;();
        DevelopmentProposal proposal =3D pdDoc.getDevelopmentProposal();
        ProposalPerson person =3D proposal.getPrincipalInvestigator();
        ProposalPersonModuleQuestionnaireBean bean =3D new =
ProposalPersonModuleQuestionnaireBean(proposal, person);
        List&lt;AnswerHeader&gt; headers =3D =
KraServiceLocator.getService(QuestionnaireAnswerService.class).getQuestio=
nnaireAnswer(bean);       =20
        for (AnswerHeader answerHeader : headers) {
            questionnaireAnswers.addAll(answerHeader.getAnswers());
        }
        return questionnaireAnswers;
    }
=09
    public List&lt;Answer&gt; =
getQuestionnaireAnswers(DevelopmentProposal developmentProposal,String =
namespace,String formname) {
        List&lt;AnswerHeader&gt; answerHeaders =3D =
getProposalDevelopmentS2sQuestionnaireService().getProposalAnswerHeaderFo=
rForm(developmentProposal,namespace, formname);
        List&lt;Answer&gt; questionnaireAnswers =3D new =
ArrayList&lt;Answer&gt;();
        for (AnswerHeader answerHeader : answerHeaders) {
            Questionnaire questionnaire =3D =
answerHeader.getQuestionnaire();
            List&lt;QuestionnaireQuestion&gt; questionnaireQuestions =3D =
questionnaire.getQuestionnaireQuestions();
            for (QuestionnaireQuestion questionnaireQuestion : =
questionnaireQuestions) {
                Answer questionAnswer =3D =
getAnswer(questionnaireQuestion,answerHeader);
                questionnaireAnswers.add(questionAnswer);
            }
        }
        return questionnaireAnswers;
    }
   =20
    protected Answer getAnswer(QuestionnaireQuestion =
questionnaireQuestion,AnswerHeader answerHeader) {
        List&lt;Answer&gt; answers =3D answerHeader.getAnswers();
        for (Answer answer : answers) {
            =
if(answer.getQuestionnaireQuestionsIdFk().equals(questionnaireQuestion.ge=
tQuestionnaireQuestionsId())){
                return answer;
            }
        }
        return null;
    }

	/*
	 * Finds the {@link Questionnaire} with Highest Sequence Number
	 *=20
	 */
	protected Questionnaire getHighestSequenceNumberQuestionnair(
			Integer questionnaireId) {
		Questionnaire highestQuestionnairSequenceNumber =3D null;
		Map&lt;String, Object&gt; fieldValues =3D new HashMap&lt;String, =
Object&gt;();
		fieldValues.put(QUESTIONNAIRE_ID, questionnaireId);
		Collection&lt;Questionnaire&gt; questionnairs =3D =
businessObjectService
				.findMatchingOrderBy(Questionnaire.class, fieldValues,
						SEQUENCE_NUMBER, Boolean.FALSE);
		if (questionnairs.size() &gt; 0) {
			List&lt;Questionnaire&gt; questionnairList =3D new =
ArrayList&lt;Questionnaire&gt;();
			questionnairList.addAll(questionnairs);
			highestQuestionnairSequenceNumber =3D questionnairList.get(0);
		}
		return highestQuestionnairSequenceNumber;
	}
    /**
     *=20
     * This method is used to get the details of Contact person
     *=20
     * @param pdDoc(ProposalDevelopmentDocument)
     *            proposal development document.
     * @param contactType(String)
     *            for which the DepartmentalPerson has to be found.
     * @return depPerson(DepartmentalPerson) corresponding to the =
contact type.
     */
    public DepartmentalPerson getContactPerson(
            ProposalDevelopmentDocument pdDoc) {
        String contactType =3D getContactType();
        boolean isNumber =3D true;
        try {
            Integer.parseInt(contactType);
        } catch (NumberFormatException e) {
            isNumber =3D false;
        }
        DepartmentalPerson depPerson =3D new DepartmentalPerson();
        if (isNumber) {
            for (ProposalPerson person : pdDoc.getDevelopmentProposal()
                    .getProposalPersons()) {
                for (ProposalPersonUnit unit : person.getUnits()) {
                    if (unit.isLeadUnit()) {
                        Unit leadUnit =3D unit.getUnit();
                        =
leadUnit.refreshReferenceObject("unitAdministrators");
                        for (UnitAdministrator admin : leadUnit
                                .getUnitAdministrators()) {
                            if (contactType.equals(admin
                                    .getUnitAdministratorTypeCode())) {
                                KcPerson unitAdmin =3D =
getKcPersonService().getKcPersonByPersonId(admin.getPersonId());
                                =
depPerson.setLastName(unitAdmin.getLastName());
                                =
depPerson.setFirstName(unitAdmin.getFirstName());
                                if (unitAdmin.getMiddleName() !=3D null) =
{
                                    =
depPerson.setMiddleName(unitAdmin.getMiddleName());
                                }
                                =
depPerson.setEmailAddress(unitAdmin.getEmailAddress());
                                =
depPerson.setOfficePhone(unitAdmin.getOfficePhone());
                                =
depPerson.setFaxNumber(unitAdmin.getFaxNumber());
                                =
depPerson.setPrimaryTitle(unitAdmin.getPrimaryTitle());
                                =
depPerson.setAddress1(unitAdmin.getAddressLine1());
                                =
depPerson.setAddress2(unitAdmin.getAddressLine2());
                                =
depPerson.setAddress3(unitAdmin.getAddressLine3());
                                depPerson.setCity(unitAdmin.getCity());
                                =
depPerson.setCounty(unitAdmin.getCounty());
                                =
depPerson.setCountryCode(unitAdmin.getCountryCode());
                                =
depPerson.setPostalCode(unitAdmin.getPostalCode());
                                =
depPerson.setState(unitAdmin.getState());
                                break;
                            }
                        }
                    }
                }
            }
        }
        return depPerson;
    }

    public void =
deleteSystemGeneratedAttachments(ProposalDevelopmentDocument pdDoc) {
        List&lt;Narrative&gt; narratives =3D =
pdDoc.getDevelopmentProposal().getNarratives();
        List&lt;Integer&gt; deletedItems =3D new =
ArrayList&lt;Integer&gt;();
        Integer i=3D0;
        for (Narrative narrative : narratives) {
           =20
            if(narrative.getNarrativeType()!=3Dnull &amp;&amp; =
"Y".equals(narrative.getNarrativeType().getSystemGenerated())){
                deletedItems.add(i);
            }
            i++;
        }
        for (int lineToDelete =3D deletedItems.size()-1; lineToDelete =
&gt;=3D0; lineToDelete--) {
            getNarrativeService().deleteProposalAttachment(pdDoc, =
deletedItems.get(lineToDelete));
        }
    }
   =20
    /**
     * Gets the kcPersonService attribute.=20
     * @return Returns the kcPersonService.
     */
    public KcPersonService getKcPersonService() {
        return kcPersonService;
    }

    /**
     * Sets the kcPersonService attribute value.
     * @param kcPersonService The kcPersonService to set.
     */
    public void setKcPersonService(KcPersonService kcPersonService) {
        this.kcPersonService =3D kcPersonService;
    }
=09
    /**
     *=20
     * This method returns the type of contact person for a proposal
     *=20
     * @return String contact type for the proposal
     */
    protected String getContactType() {
        String contactType =3D getParameterValue(PROPOSAL_CONTACT_TYPE);
        if (contactType =3D=3D null || contactType.length() =3D=3D 0) {
            contactType =3D CONTACT_TYPE_O;
        }
        return contactType;
    }

    /**
     *=20
     * This method computes the number of months between any 2 given
     * {@link Date} objects
     *=20
     * @param dateStart
     *            starting date.
     * @param dateEnd
     *            end date.
     *=20
     * @return number of months between the start date and end date.
     */
    public BudgetDecimal getNumberOfMonths(Date dateStart, Date dateEnd) =
{
        BudgetDecimal monthCount =3D BudgetDecimal.ZERO;
        int fullMonthCount =3D 0;

        Calendar startDate =3D Calendar.getInstance();
        Calendar endDate =3D Calendar.getInstance();
        startDate.setTime(dateStart);
        endDate.setTime(dateEnd);

        startDate.clear(Calendar.HOUR);
        startDate.clear(Calendar.MINUTE);
        startDate.clear(Calendar.SECOND);
        startDate.clear(Calendar.MILLISECOND);

        endDate.clear(Calendar.HOUR);
        endDate.clear(Calendar.MINUTE);
        endDate.clear(Calendar.SECOND);
        endDate.clear(Calendar.MILLISECOND);

        if (startDate.after(endDate)) {
            return BudgetDecimal.ZERO;
        }
        int startMonthDays =3D startDate.getActualMaximum(Calendar.DATE)
                - startDate.get(Calendar.DATE);
        startMonthDays++;
        int startMonthMaxDays =3D =
startDate.getActualMaximum(Calendar.DATE);
        BudgetDecimal startMonthFraction =3D new =
BudgetDecimal(startMonthDays)
                .divide(new BudgetDecimal(startMonthMaxDays));

        int endMonthDays =3D endDate.get(Calendar.DATE);
        int endMonthMaxDays =3D endDate.getActualMaximum(Calendar.DATE);

        BudgetDecimal endMonthFraction =3D new =
BudgetDecimal(endMonthDays)
                .divide(new BudgetDecimal(endMonthMaxDays));

        startDate.set(Calendar.DATE, 1);
        endDate.set(Calendar.DATE, 1);

        while (startDate.getTimeInMillis() &lt; =
endDate.getTimeInMillis()) {
            startDate.set(Calendar.MONTH, startDate.get(Calendar.MONTH) =
+ 1);
            fullMonthCount++;
        }
        fullMonthCount =3D fullMonthCount - 1;
        monthCount =3D monthCount.add(new =
BudgetDecimal(fullMonthCount)).add(
                startMonthFraction).add(endMonthFraction);
        return monthCount;
    }
    /**
     *=20
     * This method gets the Federal Agency for the given
     * {@link ProposalDevelopmentDocument}
     *=20
     * @param developmentProposal
     *            Proposal Development Document.
     * @return {@link String} Federal Agency
     */
    public String getCognizantFedAgency(DevelopmentProposal =
developmentProposal) {
        StringBuilder fedAgency =3D new StringBuilder();
        ProposalSite applicantOrganization =3D =
developmentProposal.getApplicantOrganization();
        if (applicantOrganization !=3D null &amp;&amp;=20
            applicantOrganization.getOrganization()!=3Dnull &amp;&amp;=20
                =
applicantOrganization.getOrganization().getCognizantAuditor()!=3Dnull){
            =
applicantOrganization.getOrganization().refreshReferenceObject("cognizant=
AuditorRolodex");
            Rolodex rolodex =3D =
applicantOrganization.getOrganization().getCognizantAuditorRolodex();
            fedAgency.append(rolodex.getOrganization());
            fedAgency.append(", ");
            =
fedAgency.append(StringUtils.trimToEmpty(rolodex.getFirstName()));
            fedAgency.append(" ");
            =
fedAgency.append(StringUtils.trimToEmpty(rolodex.getLastName()));
            fedAgency.append(" ");
            if (rolodex.getPhoneNumber() !=3D null) {
                if (rolodex.getPhoneNumber().length() &lt; 180) {
                    fedAgency.append(rolodex.getPhoneNumber());
                } else {
                    =
fedAgency.append(rolodex.getPhoneNumber().substring(0, 180));
                }
            }
        }
        if (fedAgency.toString().length() =3D=3D 0) {
            fedAgency.append(S2SConstants.VALUE_UNKNOWN);
        }
        return fedAgency.toString();
    }

   =20
    /**
     * Gets the sponsorService attribute.=20
     * @return Returns the sponsorService.
     */
    public SponsorService getSponsorService() {
        return sponsorService;
    }

    /**
     * Sets the sponsorService attribute value.
     * @param sponsorService The sponsorService to set.
     */
    public void setSponsorService(SponsorService sponsorService) {
        this.sponsorService =3D sponsorService;
    }

    /**
     * Gets the narrativeService attribute.=20
     * @return Returns the narrativeService.
     */
    public NarrativeService getNarrativeService() {
        return narrativeService;
    }

    /**
     * Sets the narrativeService attribute value.
     * @param narrativeService The narrativeService to set.
     */
    public void setNarrativeService(NarrativeService narrativeService) {
        this.narrativeService =3D narrativeService;
    }
   =20
   =20

    public void setCitizenshipTypeService(CitizenshipTypeService =
citizenshipTypeService) {
        this.citizenshipTypeService =3D citizenshipTypeService;
    }

    /**
     * Implementation should return one of the enums defined in =
PHS398CareerDevelopmentAwardSup11V11 form schema.
     * For now, it returns US RESIDENT as default
     * @see =
org.kuali.kra.s2s.service.S2SUtilService#getCitizenship(org.kuali.kra.pro=
posaldevelopment.bo.ProposalPerson)
     *=20
     */
    public CitizenshipTypes getCitizenship(ProposalPerson =
proposalPerson) {
        String citizenSource =3D "1";
        String piCitizenShipValue =3D getParameterValue(PI_CUSTOM_DATA);
        if (piCitizenShipValue !=3D null) {
            citizenSource =3D piCitizenShipValue;
        } if (citizenSource.equals("0")) {
            CitizenshipTypes citizenShipType =3D =
citizenshipTypeService.getCitizenshipDataFromExternalSource();
            return citizenShipType;
        } else {
            CitizenshipType citizenShip;
            String allowOverride =3D =
parameterService.getParameterValue("KC-GEN", "A", =
"ALLOW_PROPOSAL_PERSON_TO_OVERRIDE_KC_PERSON_EXTENDED_ATTRIBUTES");
            if ("Y".equals(allowOverride) &amp;&amp; =
proposalPerson.getProposalPersonExtendedAttributes() !=3D null) {
                citizenShip =3D =
proposalPerson.getProposalPersonExtendedAttributes().getCitizenshipType()=
;
            } else {
                citizenShip =3D =
proposalPerson.getPerson().getExtendedAttributes().getCitizenshipType();
            }
            CitizenshipTypes retVal =3D null;
            String citizenShipCode =3D =
String.valueOf(citizenShip.getCitizenshipTypeCode());
            if =
(citizenShipCode.equals(parameterService.getParameterValue("KC-GEN", =
"A",
                    "NON_US_CITIZEN_WITH_TEMPORARY_VISA_TYPE_CODE"))) {
                return =
CitizenshipTypes.NON_US_CITIZEN_WITH_TEMPORARY_VISA;
            } else if (citizenShipCode
                    .equals(parameterService.getParameterValue("KC-GEN", =
"A", "PERMANENT_RESIDENT_OF_US_TYPE_CODE"))) {
                return CitizenshipTypes.PERMANENT_RESIDENT_OF_US;
            } else if =
(citizenShipCode.equals(parameterService.getParameterValue("KC-GEN", =
"A",
                    "US_CITIZEN_OR_NONCITIZEN_NATIONAL_TYPE_CODE"))) {
                return =
CitizenshipTypes.US_CITIZEN_OR_NONCITIZEN_NATIONAL;
            } else if =
(citizenShipCode.equals(parameterService.getParameterValue("KC-GEN", =
"A", "PERMANENT_RESIDENT_OF_US_PENDING"))) {
                return =
CitizenshipTypes.PERMANENT_RESIDENT_OF_US_PENDING;
            } else {
                throw new IllegalArgumentException("Invalid citizenship =
type provided");
            }

        }
    }
   =20
    /**
     * Gets the proposalDevelopmentS2sQuestionnaireService attribute.=20
     * @return Returns the proposalDevelopmentS2sQuestionnaireService.
     */
    public ProposalDevelopmentS2sQuestionnaireService =
getProposalDevelopmentS2sQuestionnaireService() {
        return proposalDevelopmentS2sQuestionnaireService;
    }

    /**
     * Sets the proposalDevelopmentS2sQuestionnaireService attribute =
value.
     * @param proposalDevelopmentS2sQuestionnaireService The =
proposalDevelopmentS2sQuestionnaireService to set.
     */
    public void setProposalDevelopmentS2sQuestionnaireService(
            ProposalDevelopmentS2sQuestionnaireService =
proposalDevelopmentS2sQuestionnaireService) {
        this.proposalDevelopmentS2sQuestionnaireService =3D =
proposalDevelopmentS2sQuestionnaireService;
    }

    public String removeTimezoneFactor(String applicationXmlText) {
        SimpleDateFormat timeFormat =3D new SimpleDateFormat("Z");
        String offset =3D =
timeFormat.format(dateTimeService.getCurrentDate());
        String offsetString =3D offset.substring(0,3) =
+":"+offset.substring(3);
        String filteredApplicationStr =3D =
StringUtils.remove(applicationXmlText, offsetString);
        return filteredApplicationStr;
    }
}
</PRE></BODY></HTML>
